{"componentChunkName":"component---src-templates-note-jsx","path":"/digital-garden","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Digital Garden\",\n  \"tags\": [\"learning\", \"digital-garden\"],\n  \"source\": \"[Digital Garden Setup](https://nesslabs.com/digital-garden-set-up)\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"A digital garden is an online space at the intersection of a notebook and a blog, where digital gardeners share seeds of thoughts to be cultivated in public. Contrary to a blog, where articles and essays have a publication date and start decaying as soon as they are published, a digital garden is evergreen: digital gardeners keep on editing and refining their notes.\")), mdx(\"p\", null, \"You can use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"gatsby-garden\",\n    \"title\": \"Gatsby Garden\"\n  }, \"Gatsby Garden\"), \" to create your own Digital Garden from your \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten\",\n    \"title\": \"Zettelkasten\"\n  }, \"Zettelkasten\"), \" notes.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawBody":"---\ntitle: Digital Garden\ntags:\n  - learning\n  - digital-garden\nsource: '[Digital Garden Setup](https://nesslabs.com/digital-garden-set-up)'\n---\n\n> A digital garden is an online space at the intersection of a notebook and a blog, where digital gardeners share seeds of thoughts to be cultivated in public. Contrary to a blog, where articles and essays have a publication date and start decaying as soon as they are published, a digital garden is evergreen: digital gardeners keep on editing and refining their notes.\n\nYou can use [[Gatsby Garden]] to create your own Digital Garden from your [[Zettelkasten]] notes.\n","fields":{"title":"Digital Garden","date":"2022-08-13T16:53:10.372Z"},"frontmatter":{"tags":["learning","digital-garden"],"source":"[Digital Garden Setup](https://nesslabs.com/digital-garden-set-up)"}}},"pageContext":{"title":"Digital Garden","slug":"/digital-garden","refersTo":["Gatsby Garden","Zettelkasten"],"referredBy":[{"title":"Gatsby Garden","excerpt":"Gatsby Garden  lets you create a static HTML version of your [ markdown ] notes. You can convert your Obsidian [ Zettelkasten ] Notes into aâ€¦","slug":"/gatsby-garden","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Gatsby Garden\",\n  \"description\": \"Test content.\",\n  \"tags\": [\"tool\", \"digital-garden\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/binnyva/gatsby-garden/\"\n  }, \"Gatsby Garden\"), \" lets you create a static HTML version of your \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"markdown\",\n    \"title\": \"markdown\"\n  }, \"markdown\"), \" notes. You can convert your Obsidian \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten\",\n    \"title\": \"Zettelkasten\"\n  }, \"Zettelkasten\"), \" Notes into a public \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"digital-garden\",\n    \"title\": \"Digital Garden\"\n  }, \"Digital Garden\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"}],"linkedNotes":{"gatsby garden":{"slug":"/gatsby-garden","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Gatsby Garden\",\n  \"description\": \"Test content.\",\n  \"tags\": [\"tool\", \"digital-garden\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/binnyva/gatsby-garden/\"\n  }, \"Gatsby Garden\"), \" lets you create a static HTML version of your \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"markdown\",\n    \"title\": \"markdown\"\n  }, \"markdown\"), \" notes. You can convert your Obsidian \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten\",\n    \"title\": \"Zettelkasten\"\n  }, \"Zettelkasten\"), \" Notes into a public \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"digital-garden\",\n    \"title\": \"Digital Garden\"\n  }, \"Digital Garden\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"zettelkasten":{"slug":"/zettelkasten","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Zettelkasten\",\n  \"tags\": [\"pkm\", \"zettelkasten\", \"learning\", \"notes\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Zettelkasten is a Note Taking Process and a Knowledge Management System. It has 3 types of notes\\u2026\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fleeting notes: Temporary notes for remembering\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Literature Notes: Fleeting notes combined and cleanup. Will be a summary of the content.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"permanent-notes\",\n    \"title\": \"Permanent Notes\"\n  }, \"Permanent Notes\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;"}}}},"staticQueryHashes":["1408915841","342892192"]}